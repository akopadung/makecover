{"version":3,"sources":["profile2.jpg","render.jsx","timeline.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["module","exports","Render","im1","im2","im3","im4","im5","data","this","props","options","map","obj","pic1","replace","pic2","pic3","pic4","pic5","v4","v5","console","log","className","src","logo","alt","style","topic1","topic2","display","name","title","dept","school","sso","Component","Timeline","state","Tabletop","init","key","callback","googleData","setState","simpleSheet","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,sC,uWCMtBC,G,8KACT,IAIJC,EACAC,EACAC,EACAC,EACAC,EAPIC,EAASC,KAAKC,MAAMF,KAApBA,KACJG,EAAU,GAOdH,EAAKI,KAAI,SAACC,GACRF,EAAUE,EACF,EACRV,EAAMU,EAAIC,KAAKC,QAAQ,QAAS,mBAChCX,EAAMS,EAAIG,KAAKD,QAAQ,QAAS,mBAChCV,EAAMQ,EAAII,KAAKF,QAAQ,QAAS,mBAChCT,EAAMO,EAAIK,KAAKH,QAAQ,QAAS,mBAChCR,EAAMM,EAAIM,KAAKJ,QAAQ,QAAS,sBAElC,IAAIK,EAAK,eACLC,EAAK,eAeT,OAdY,OAARf,GAAwB,KAARA,IAClBA,EAAMH,EACNiB,EAAK,OACLb,EAAMJ,EACNkB,EAAK,QAEK,OAARd,GAAwB,KAARA,IAClBA,EAAMJ,EACNkB,EAAK,OACLf,EAAMH,EACNiB,EAAK,QAGPE,QAAQC,IAAI,WAAWZ,GAErB,yBAAKa,UAAU,QACb,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,OAAOC,MAAO,KACvD,uBAAGJ,UAAU,cAAcb,EAAQkB,QACnC,uBAAGL,UAAU,aAAab,EAAQmB,QAClC,yBAAKN,UAAU,cAAcG,IAAI,GAAGF,IAAKtB,IACzC,yBAAKqB,UAAU,aAAaG,IAAI,GAAGF,IAAKrB,IACxC,yBAAKoB,UAAU,eAAeG,IAAI,GAAGF,IAAKpB,IAC1C,yBAAKmB,UAAU,aAAaG,IAAI,GAAGF,IAAKnB,EAAKsB,MAAO,CAAEG,QAASX,KAC/D,yBACEI,UAAU,eACVG,IAAI,GACJF,IAAKlB,EACLqB,MAAO,CAAEG,QAASV,KAEpB,uBAAGG,UAAU,UAAUb,EAAQqB,MAC/B,uBAAGR,UAAU,UAAUb,EAAQsB,OAC/B,uBAAGT,UAAU,UAAUb,EAAQuB,MAC/B,uBAAGV,UAAU,UAAUb,EAAQwB,QAC/B,uBAAGX,UAAU,UAAUb,EAAQyB,KAC/B,uBAAGZ,UAAU,UAAb,kOACA,uBAAGA,UAAU,UAAb,+G,GAxD4Ba,cCEfC,E,kDACnB,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACX/B,KAAM,IAHI,E,gEAOO,IAAD,OAClBgC,IAASC,KAAK,CACZC,IAAK,+CACLC,SAAU,SAACC,GACTtB,QAAQC,IAAI,4BAA0BqB,GACtC,EAAKC,SAAS,CACZrC,KAAMoC,KAGVE,aAAa,M,+BAKf,OACErC,KAAK8B,OAAS9B,KAAK8B,MAAM/B,MACvB,kBAAC,EAAD,CAAQA,KAAMC,KAAK8B,Y,GAxBWF,aCIvBU,MARf,WAEE,OAEI,kBAAC,EAAD,OCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,a,wCEzI5BlE,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.521701c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile2.da4c82e1.jpg\";","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Tabletop from \"tabletop\";\nimport logo from \"./logo.svg\";\nimport profile from \"./profile2.jpg\";\n\nexport default class Render extends Component {\n  render() {\n    const { data } = this.props.data;\n    var options = [];\n    var i = 0;\n    var im1;\n    var im2;\n    var im3;\n    var im4;\n    var im5;\n    data.map((obj) => {\n      options = obj;\n      i = i + 1;\n      im1 = obj.pic1.replace(\"open?\", \"uc?export=view&\");\n      im2 = obj.pic2.replace(\"open?\", \"uc?export=view&\");\n      im3 = obj.pic3.replace(\"open?\", \"uc?export=view&\");\n      im4 = obj.pic4.replace(\"open?\", \"uc?export=view&\");\n      im5 = obj.pic5.replace(\"open?\", \"uc?export=view&\");\n    });\n    var v4 = \"inline-block\";\n    var v5 = \"inline-block\";\n    if (im4 === null || im4 === \"\") {\n      im4 = im1;\n      v4 = \"none\";\n      im5 = im1;\n      v5 = \"none\";\n    }\n    if (im5 === null || im5 === \"\") {\n      im5 = im1;\n      v5 = \"none\";\n      im4 = im1;\n      v4 = \"none\";\n    }\n\n    console.log(\"options \"+options);\n    return (\n      <div className=\"page\">\n        <img src={logo} className=\"App_logo\" alt=\"logo\" style={{}} />\n        <p className=\"App_header\">{options.topic1}</p>\n        <p className=\"app_head2\">{options.topic2}</p>\n        <img className=\"App_profile\" alt=\"\" src={im1} />\n        <img className=\"app_story1\" alt=\"\" src={im2} />\n        <img className=\"app_story1_1\" alt=\"\" src={im3} />\n        <img className=\"app_story2\" alt=\"\" src={im4} style={{ display: v4 }} />\n        <img\n          className=\"app_story2_2\"\n          alt=\"\"\n          src={im5}\n          style={{ display: v5 }}\n        />\n        <p className=\"app_a1\">{options.name}</p>\n        <p className=\"app_a2\">{options.title}</p>\n        <p className=\"app_a3\">{options.dept}</p>\n        <p className=\"app_a4\">{options.school}</p>\n        <p className=\"app_a5\">{options.sso}</p>\n        <p className=\"app_a6\">สำนักงานคณะกรรมการการศึกษาขึ้นพื้นฐาน</p>\n        <p className=\"app_a7\">กระทรวงศึกษาธิการ</p>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Tabletop from \"tabletop\";\nimport logo from \"./logo.svg\";\nimport profile from \"./profile2.jpg\";\nimport Render from \"./render\"\nvar data = [];\nvar id = \"\";\nexport default class Timeline extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n    };\n  }\n\n  componentDidMount() {\n    Tabletop.init({\n      key: \"1t8RteVim3QRx_U2vlbwXkMNSL7RRq1oY0xeicxE4wws\",\n      callback: (googleData) => {\n        console.log(\"google sheet data --->\", googleData);\n        this.setState({\n          data: googleData\n        });\n      },\n      simpleSheet: true,\n    });\n  }\n\n  render() {\n    return (\n      this.state && this.state.data &&\n        <Render data={this.state}></Render>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Timeline from './timeline'\n\nfunction App() {\n\n  return (\n\n      <Timeline></Timeline>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}